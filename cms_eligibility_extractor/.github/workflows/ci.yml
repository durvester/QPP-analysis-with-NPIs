name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0

    - name: Code formatting check
      run: |
        black --check src web tests
        isort --check-only src web tests

    - name: Linting
      run: |
        ruff check src web tests
        flake8 src web tests

    - name: Type checking
      run: mypy src web

    - name: Security checks
      run: |
        bandit -r src web
        safety check

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Check dependencies
      run: python tests/run_all_tests.py --check-deps

    - name: Run unit tests
      run: python tests/run_all_tests.py unit --verbose

    - name: Run integration tests
      run: python tests/run_all_tests.py integration --verbose

    - name: Generate coverage report
      if: matrix.python-version == '3.9'
      run: python tests/run_all_tests.py report

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run CLI E2E tests
      run: python tests/run_all_tests.py cli --verbose

    - name: Run Web E2E tests
      run: python tests/run_all_tests.py web --verbose

    - name: Upload E2E test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-artifacts
        path: |
          test-results.xml
          logs/
          temp_outputs/

  # Docker build and test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: cms-eligibility-extractor:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm cms-eligibility-extractor:latest --help
        docker run --rm cms-eligibility-extractor:latest --dry-run --npi-csv templates/npi_template.csv

  # Documentation build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        # Documentation build would go here
        echo "Documentation build placeholder"

    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      run: |
        # Documentation deployment would go here
        echo "Documentation deployment placeholder"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: bandit -r src web -f json -o bandit-report.json

    - name: Run Safety dependency scan
      run: safety check --json --output safety-report.json

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run performance tests
      run: |
        # Performance test placeholder
        echo "Performance tests would run here"

  # Build and publish
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test, e2e-tests]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Staging deployment would happen here"
        # Add actual deployment steps

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Deploy to production
      run: |
        echo "Production deployment would happen here"
        # Add actual deployment steps

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality, test, e2e-tests, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.e2e-tests.result == 'success' }}
      run: |
        echo "✅ All checks passed!"

    - name: Notify on failure
      if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.e2e-tests.result == 'failure' }}
      run: |
        echo "❌ Some checks failed!"
        exit 1