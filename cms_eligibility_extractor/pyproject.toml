[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "cms-eligibility-extractor"
description = "CMS Quality Payment Program (QPP) Eligibility API Data Extractor"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "CMS QPP Team"},
]
keywords = ["cms", "qpp", "healthcare", "api", "eligibility"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
dependencies = [
    "requests>=2.25.0",
    "pydantic>=1.8.0",
    "python-dotenv>=0.19.0",
    "PyYAML>=6.0",
    "pandas>=1.3.0",
    "flask>=2.0.0",
    "flask-wtf>=1.0.0",
    "wtforms>=3.0.0",
    "werkzeug>=2.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-flask>=1.2.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/cms/eligibility-api-qpp"
Documentation = "https://github.com/cms/eligibility-api-qpp#readme"
Repository = "https://github.com/cms/eligibility-api-qpp.git"
"Bug Tracker" = "https://github.com/cms/eligibility-api-qpp/issues"

[project.scripts]
cms-eligibility-extractor = "src.main:main"

[tool.setuptools]
packages = ["src", "web"]

[tool.setuptools_scm]
write_to = "src/_version.py"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | htmlcov
  | temp_uploads
  | temp_outputs
  | outputs
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "web"]
known_third_party = ["requests", "flask", "pydantic", "pytest"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "dotenv.*",
    "pandas.*",
    "werkzeug.*",
    "flask_wtf.*",
    "wtforms.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "web: marks tests as web application tests",
    "cli: marks tests as CLI tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src", "web"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "temp_uploads", "temp_outputs", "outputs"]
skips = ["B101", "B601"]  # Skip assert statements and shell injection warnings for tests

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "RET", # flake8-return
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise without from inside except
    "RET504", # unnecessary variable assignment before return
    "T201",  # print found (allow print statements)
]
unfixable = [
    "F841",  # unused variable
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG", "SIM", "PTH"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["src", "web"]
known-third-party = ["requests", "flask", "pydantic", "pytest"]

[tool.ruff.mccabe]
max-complexity = 10